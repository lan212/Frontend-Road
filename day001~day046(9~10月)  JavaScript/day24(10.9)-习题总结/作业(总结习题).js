// 需求: 本金10000元存入银行，年利率是千分之三，每过1年，将本金和利息相加作为新的本金。计算5年后，获得的本金是多少？
// 分析： 
// 每年的利息 + 上一年的本金 = 下一年的本金
// 要计算5年之后的，所以让for循环 循环5次
// 起步的本金为10000

// 步骤：
//声明一个变量   bj为每一年的本金 ，起初的本金为10000
var bj = 10000
//动用一个for循环，控制循环的次数为5次
for (var i=1; i<=5; i++)  //1,2,3,4,5  5次循环
{
    //新的本金=上一年的本金*年利率  +  上一年的本金
    bj = bj * 3/1000 + bj
}
//输出最后一年的本金
console.log(bj);



// 需求: 声明一个三位数，按逆序打印出各位数字。例如原数字为312，应输出213。
// 分析：将一个三位数逆序，那么需要将每一位数提取出来，重新排序

// 步骤：
// 首先声明一个变量 三位数
var a = 123
// 声明三个变量，将每一位数提取出来
var gewei = a%10
var shiwei = parseInt(a%100/10)
var baiwei = parseInt(a/100)
// console.log(gewei,shiwei,baiwei);    测试一下每一位数是否提取正确
// 方法一：引用一个空字符串， 将三位数逆序排列  用字符串+数字 将数字转化为字符串拼接输出的原理 逆序输出这个三位数
console.log(gewei+''+shiwei+baiwei);
// 方法二：将个位数乘100，十位数乘10，百位数   相加
console.log(gewei*100+shiwei*10+baiwei)



// 需求: 利用JavaScript打印出所有的"水仙花数"，所谓"水仙花数"是指一个三位数，其各位数字立方和等于该数本身。

// 分析：水仙花数是三位数，所以范围在100-999之间，需要用循环从这个区间中找出水仙花数
//      利用判断 在循环里 挑出符合水仙花数条件的数(条件是各位数立方和等于该数本身，所以要定义三个变量挑出各位数，用于判断)，打印输出

// 步骤：
// 构建一个for循环，循环范围在100-999之间
for (var i=100; i<=999; i++)
{
    //声明三个变量  挑出三位数 中 的每位数  , 用于 判断条件 
    var gewei = i%10
    var shiwei = parseInt(i%100/10)
    var baiwei = parseInt(i/100)
    // 用 if 判断，条件是各位数立方和等于该数本身
    if (gewei*gewei*gewei+shiwei*shiwei*shiwei+baiwei*baiwei*baiwei==i)
    {
        //符合条件：打印输出 这个三位数  ，输出的数则为水仙花数
        console.log(i);
    }
}



// 需求: 求1!+2!+3!+...+10!的和

// 分析：
// 首先要知道每个阶乘数怎么算？
// 1! = 1       1
// 2! = 1*2     1！* 2
// 3! = 1*2*3   2！* 3
// 由此得出: 每个数的阶乘 = 上一个阶乘 * 这个数本身
// 然后我们需要 一个 声明一个变量 sum 将 所有阶乘加起来

// 步骤：
// 声明一个变量作为总和
var sum = 0
// 声明一个变量作为每次的阶乘数
var jie = 1
// 动用循环求出每次的阶乘数
for (var i=1; i<=10; i++)
{
    // 根据规律，算出每次阶乘数，   每个数的阶乘 = 上一个阶乘 * 这个数本身
    jie = jie * i
    // console.log(jie);    测试一下每次的阶乘数是否符合规律，是否正确
    // 将每次得出的阶乘数累加到 sum 里
    sum = sum + jie 
}
// 输出最后的总和
console.log(sum);



// 需求: 鸡兔同笼：鸡和兔子一共35只，笼子里一共有94只脚，用程序计算出鸡和兔子分别多少只

// 分析：鸡和兔一共35只，所以可以推断出 鸡的数量一定是在 0-35只 ，所以这时我们可以利用一个循环来 找出符合情况的鸡数
//      所以循环里的变量可以定义为鸡数，那么可以再定义一个兔子数 兔子数=35-鸡数  至于什么是符合情况？ 就是利用判断，
//      条件设为 鸡兔脚数总数为94  通过此判断，则为符合情况

// 步骤：
// 动用一个循环，循环的变量设为鸡数 ji
for (var ji=0; ji<=35; ji++)
{
    // 声明一个变量 兔子数 tu   兔子数 = 35 - 鸡数
    var tu = 35 - ji
    // 利用判断，挑出符合情况的鸡数  条件为  鸡兔脚数总数为94 
    if (tu*4 + ji*2 == 94)
    {
        // 输出符合情况的 鸡数，兔数
        console.log(`鸡${ji}只，兔${tu}只`);
    }
}



// 需求: 你要做的是统计出100到200之间的整数一共有多少个3。 解释：例如101中没有3；103中有一个3；133中有两个3。

// 分析：首先要用循环 将100-200 之间的数都找出来，然后需要挑出 每个数 中的个位 或者 十位 为3 的 ，只要出现一个3，我们将给声明的计数器变量里+1 

// 步骤：
// 声明一个变量 a 作为 3的个数的计数器
var a = 0
// 动用一个循环找出100-200之间的所有数
for (var i=100; i<=200; i++)
{
    // 如果这个数的个位数为3，让 计数器a + 1
    if (i%10==3)
    {
        a += 1
    }
    // 如果这个数的十位数为3，让 计数器a + 1
    if (parseInt(i%100/10)==3)
    {
        a += 1
    }
}
// 输出计算结果
console.log(a);



// 需求: 利用JavaScript完成如下九九乘法表
// 1x1=1
// 1x2=2 2x2=4
// ...   ...  ...

// 分析：九九乘法表是由两个变动的数相乘组成的  所以我们应该会需要两个循环，而且需要利用其中一个循环控制行数

// 步骤：
// 动用一个循环，既控制第一个数的变换，又控制输出行数
for (var i=1; i<=9; i++)
{
    // 声明一个变量，值作为每行输出的内容  注意声明变量的位置，要放到大循环里面，小循环外面
    var b = ''
    // 再动用一个循环，控制第二个数的变换
    for (var j=1; j<=i; j++)
    {
        // 用拼接字符串的方法 将每次相乘 拼接入a中
        b = b + i + 'x' + j +'=' + i*j + ' '
    }
    // 输出每行乘法表的内容
    console.log(b);
}



// 需求:把1 - 100之间的数字，10个数字为一组，在控制台打印出每组的和，例如，1 - 10的和为一组，输出来，11 - 20的和为一组输出来，依次类推

// 分析：首先我们需要一个大循环把1-100所有数用进来，然后控制每加10次数，输出一次，并让 上10个数 的和归零

// 步骤：
// 声明一个变量 作为每组数的和
var ten = 0
// 声明一个变量，将每10个数 相加 分为多组  
var a = 0
// 动用大循环，循环1-100
for (var i=1; i<=100; i++)
{
    // 让每组数字加入ten中
    ten = ten + i
    // 使用一个判断，并且使a每次加一 当变量a==10，说明已经加了10次数，
    a = a+1
    if (a==10)
    {
        // 每加够10次，输出一次ten
        console.log(ten);
        // 并且将ten归零
        ten = 0
        // a 也归零
        a = 0
    }
}



// 需求: 使用for循环语句计算3+6+9+12+……+99的结果

// 分析：每个数相差3，从3开始， 到99介绍，想加到总的sum中

// 步骤：
// 声明一个变量，作为总和
var sum = 0
// 动用一个循环，起步值为3，范围到99，i每次递进3
for (var i=3; i<=99; i=i+3)
{
    // 将每次的i加入总和
    sum = sum + i
}
// 输出总和
console.log(sum);



// 需求: 利用JavaScript完成输出等腰三角形（由“空格”和“*”这两种符号组成)

// 分析：总共要输出5行内容，所以外面需要一个循环5次的大循环，并且需要让每行的“ ” 和 “*” 数量 跟随 行数 变换而变换

// 步骤: 
// 动用一个大循环，控制行数 ，循环5次即可
for (var i=1; i<=5; i++)
{
    // 声明一个变量，作为每行的空格数
    var kong = ''
    // 动用一个小循环，使其每次的取值范围，跟随跟随外部大循环的取值而变换
    for (var k=5; k>=i; k--)
    {
        // 随着循环取值范围的变换，将‘ ’加入空格数中 
        kong = kong + ' '
    }
    // 声明一个变量，作为每行的星星数
    var star = ''
    // 动用一个小循环，使其每次的取值范围，跟随跟随外部大循环的取值而变换
    for (var s=1; s<=i; s++)
    {
        star = star + ' *'
    }
    // 将空格变量和星星拼接起来 打印输出
    console.log(kong + star );
}


// 菱形
// 分析: 分为两大部分 
// 步骤：
// 第一部分：做出前4行
for (var i=1; i<=4; i++)
{
    var xia = ''
    for (var x=4; x>=i+1; x--)
    {
        xia = xia + '-'
    }
    // console.log(xia);
    
    var star = '*'
    for (var s=1; s<=i-1; s++)
    {
        star = star + '**'
    }
    console.log(xia + star );
}
//第二部分：做出后三行
for (var j=1; j<=3; j++)
{
    var xia1=''
    for (var x1=1; x1<=j; x1++)
    {
        xia1 = xia1 + '-'
    }
    var star1 = '*'
    for (var s1=j+1; s1<=3; s1++)
    {
        star1 = star1 +'**'
    }
    console.log(xia1+ star1);
}



// 斐波那契数列  1，1，2，3，5，8，13，21
// 分析： 
// 第一个月： 1
// 第二个月： 1
// 第三个月： 未知数（第一个月 + 第二个月）
// 要声明三个变量：
// 以后： 第三个月兔子的数量等于前两个月的兔子数加前一个月的兔子数

// 步骤：
// 1. 声明一个变量，代表第一个月兔子的对数
// 2. 声明一个变量，代表第二个月兔子的对数
// 3. 声明一个变量，代表第三个月兔子的对数
// 4. 循环： 计算兔子的数量
// 4.1 因为我已经知道了日历中的1月和2月的兔子数量， 必须先求出3月的兔子数量
// 4.2 进行值的传递：m1=m2
// 4.3 进行值的传递：m2=m3
// 4.4 打印m3
var m1 = 1
var m2 = 1
var m3 = 0
for (var i=2; i<12; i++)
{
    m3 = m1 + m2
    m1 = m2
    m2 = m3
}
console.log(m3);



